import { promises as fs } from 'fs';
import { join } from 'path';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat.js';

dayjs.extend(customParseFormat);

const { readdir, writeFile } = fs;

const PATH_TO_VERSIONS = join('src', 'version');
const PATH_TO_TYPINGS_OUTPUT_FILE = join('src', 'OpenResumeVersion.ts');
const DATE_FORMAT = 'YYYY-MM-DD';

const getTypeDefinition = (versions) => {
    const versionArrayOfStrings = [...versions]
        .sort((a, b) => dayjs(a, DATE_FORMAT).isAfter(dayjs(b, DATE_FORMAT)) ? -1 : 1)
        .map((v) => `'${v}'`);

    const latestVersionString = versionArrayOfStrings[0];
    const versionsTypeString = [`'latest'`, ...versionArrayOfStrings.map(v => `\n    | ${v}`)];
    const versionsJsArrayString = versionArrayOfStrings.map(v => `    ${v}`).join(',\n');

    return `// this file is autogenerated by "yarn g:versions"
// do not edit it manually
export type OpenResumeVersion = ${versionsTypeString.join('')};

export const openResumeLatestVersion: OpenResumeVersion = ${latestVersionString};

export const openResumeVersions: OpenResumeVersion[] = [
${versionsJsArrayString}
];
`;
};


async function main() {
    const versions = await readdir(PATH_TO_VERSIONS);

    await writeFile(PATH_TO_TYPINGS_OUTPUT_FILE, getTypeDefinition(versions));

    console.log(`Type definition generated at ${PATH_TO_TYPINGS_OUTPUT_FILE}`);
}

main();
