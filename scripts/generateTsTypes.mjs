import { promises as fs } from 'fs';
import { join } from 'path';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat.js';
import { compileFromFile } from 'json-schema-to-typescript';

dayjs.extend(customParseFormat);

const { readdir, writeFile } = fs;

const PATH_TO_VERSIONS = join('src', 'version');
const DATE_FORMAT = 'YYYY-MM-DD';

const getPathToVersion = (version, ...paths) => join(PATH_TO_VERSIONS, version, ...paths);

async function main() {
    const dateVersionOrAll = process.argv.at(2);

    if (!dateVersionOrAll) {
        console.error('No version specified. Expected: YYYY-MM-DD or "all"');
        process.exit(1);
    }

    let versions = [];

    if (dateVersionOrAll === 'all') {
        versions = await readdir(PATH_TO_VERSIONS);
    }
    else {
        if (!dayjs(dateVersionOrAll, DATE_FORMAT).isValid()) {
            console.error('Invalid version format. Expected: YYYY-MM-DD');
            process.exit(1);
        }

        versions = [dateVersionOrAll];
    }

    await Promise.all(versions.map(async (version) => {
        const content = await compileFromFile(getPathToVersion(version, 'resume.schema.json'),{
            bannerComment: `// this file was autogenerated by "yarn g:types" for version ${version}
// do not edit it manually            
`
        });

        await writeFile(getPathToVersion(version, 'resume.schema.ts'), content);
    }));

    console.log(`Type definition generated for: `);
    console.log(versions.map((v) => ` - ${v}`).join('\n'));
}

main();
